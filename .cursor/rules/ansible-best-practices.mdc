---
description: Comprehensive Ansible best practices for Telco Verification CI/CD automation projects, covering code organization, deployment patterns, testing, security, and performance optimization for hybrid multinode deployments.
globs: *.yml,*.yaml,*.j2
---

# Ansible Best Practices for Telco Verification CI/CD

Follow these comprehensive Ansible best practices to ensure maintainable, secure, and efficient automation for OpenShift Edge computing deployments and CI/CD pipelines.

## 1. Project Structure and Organization

### 1.1 Directory Structure Standards

- **Root Directory:**
  - [ansible.cfg](mdc:ansible.cfg): Main Ansible configuration file
  - [requirements.yml](mdc:requirements.yml): Role dependencies from Ansible Galaxy
  - [playbooks/](mdc:playbooks/): Main playbooks directory
    - [deploy-ocp-hybrid-multinode.yml](mdc:playbooks/deploy-ocp-hybrid-multinode.yml): Primary OCP deployment playbook
    - [deploy-ocp-operators.yml](mdc:playbooks/deploy-ocp-operators.yml): Operator deployment playbook
    - [cnf/](mdc:playbooks/cnf/): CNF-specific playbooks and templates
    - [infra/](mdc:playbooks/infra/): Infrastructure deployment playbooks
  - [inventories/](mdc:inventories/): Inventory files for different environments
    - [ocp-deployment/](mdc:inventories/ocp-deployment/): OCP deployment inventory
    - [cnf/](mdc:inventories/cnf/): CNF testing inventory
    - [infra/](mdc:inventories/infra/): Infrastructure inventory
  - [scripts/](mdc:scripts/): Python utility scripts for CI/CD operations

### 1.2 File Naming Conventions

- **Playbooks:** Use lowercase with hyphens (e.g., `deploy-ocp-hybrid-multinode.yml`)
- **Roles:** Use lowercase with underscores (e.g., `ocp_operator_deployment`, `oc_client_install`)
- **Variables:** Use snake_case for consistency (e.g., `ocp_version`, `cluster_name`)
- **Templates:** Use descriptive names with `.j2` extension (e.g., `machineConfigPool.yml.j2`)

### 1.3 OpenShift-Specific Organization

- **CNF Playbooks:** Organize CNF-related tasks in [playbooks/cnf/](mdc:playbooks/cnf/)
- **Operator Deployment:** Use dedicated roles like [ocp_operator_deployment](mdc:playbooks/roles/ocp_operator_deployment/)
- **Version Management:** Implement version facts gathering with [ocp_version_facts](mdc:playbooks/roles/ocp_version_facts/)
- **Client Tools:** Manage OC client installation with [oc_client_install](mdc:playbooks/roles/oc_client_install/)

## 2. OpenShift Deployment Patterns

### 2.1 Hybrid Multinode Deployment

- **Use the main deployment playbook:** [deploy-ocp-hybrid-multinode.yml](mdc:playbooks/deploy-ocp-hybrid-multinode.yml)
- **Infrastructure preparation:** Leverage [infra/](mdc:playbooks/infra/) playbooks for hypervisor and bastion setup
- **Inventory management:** Use [build-inventory.py](mdc:inventories/ocp-deployment/build-inventory.py) for dynamic inventory generation
- **Machine configuration:** Implement machine config pools for CNF workloads

### 2.2 Operator Management

- **Centralized operator deployment:** Use [deploy-ocp-operators.yml](mdc:playbooks/deploy-ocp-operators.yml)
- **Version-aware deployments:** Implement pre-GA, brew, and stable operator channels
- **Configuration templates:** Use Jinja2 templates for operator configurations
- **Image digest management:** Implement ImageDigestMirrorSet for disconnected environments

### 2.3 CNF-Specific Patterns

- **CNF testing automation:** Use [cnf/](mdc:playbooks/cnf/) playbooks for testing workflows
- **Performance profiles:** Implement Node Tuning Operator configurations
- **Machine config pools:** Create dedicated worker pools for CNF workloads
- **Network configuration:** Handle SR-IOV and other network-intensive configurations

## 3. Security Best Practices

### 3.1 Secrets Management

- **SSH Keys:** Secure SSH key management for bastion and cluster access
- **Pull Secrets:** Protect OpenShift pull secrets using [templates/pull_secret.j2](mdc:playbooks/templates/pull_secret.j2)
- **Registry Credentials:** Secure container registry access credentials

## 4. Performance Optimization

### 4.1 Ansible Performance

- **SSH Multiplexing:** Configure SSH multiplexing in [ansible.cfg](mdc:ansible.cfg)
- **Parallel Execution:** Use appropriate fork settings for concurrent operations
- **Fact Caching:** Implement fact caching for large-scale deployments
- **Connection Optimization:** Use persistent connections for better performance

## 5. Error Handling and Debugging

### 5.1 Error Handling Patterns

- **Block and Rescue:** Use block/rescue patterns for graceful error handling
- **Rollback Mechanisms:** Implement rollback strategies for failed deployments
- **Validation Tasks:** Add validation tasks to verify deployment success
- **Conditional Execution:** Use `when` conditions to handle different scenarios

### 5.2 Debugging Techniques

- **Verbose Output:** Use ansible-playbook -vvv for detailed debugging
- **Debug Module:** Use debug module to print variable values
- **Register Variables:** Capture command output for troubleshooting
- **Pause Module:** Use pause module for interactive debugging

## 6. Documentation and Maintenance

### 6.1 Documentation Standards

- **README Files:** Maintain comprehensive README files for each component
- **Code Comments:** Add meaningful comments to complex logic
- **Variable Documentation:** Document all variables and their purposes
- **Examples:** Provide usage examples for roles and playbooks

### 6.2 Version Management

- **Semantic Versioning:** Use semantic versioning for role releases
- **Changelog Maintenance:** Keep detailed changelogs for all changes
- **Dependency Tracking:** Track and update role dependencies regularly
- **Compatibility Matrix:** Maintain compatibility information for different versions

### 6.3 Continuous Improvement

- **Code Reviews:** Implement mandatory code reviews for all changes
- **Refactoring:** Regularly refactor code to improve maintainability
- **Best Practices Updates:** Keep up with evolving Ansible and OpenShift best practices
- **Community Contributions:** Contribute improvements back to the community

## 7. Common Pitfalls to Avoid

### 7.1 OpenShift-Specific Pitfalls

- **Resource Quotas:** Don't ignore resource quotas and limits
- **API Deprecation:** Stay updated with OpenShift API deprecations
- **Network Policies:** Ensure network policies don't block required communication
- **Storage Classes:** Use appropriate storage classes for different workload types

### 7.2 CNF-Specific Pitfalls

- **Performance Profiles:** Don't apply conflicting performance profiles
- **Node Selection:** Ensure proper node selection for CNF workloads
- **Resource Isolation:** Properly isolate CNF resources from other workloads
- **Network Configuration:** Validate network configurations thoroughly

### 7.3 Automation Pitfalls

- **Hardcoded Values:** Avoid hardcoding environment-specific values
- **Idempotency:** Ensure all tasks are idempotent
- **Error Handling:** Don't ignore errors in critical deployment steps
- **Secret Management:** Never commit secrets to version control

## 8. Tools and Environment

### 8.1 Development Tools

- **Ansible Lint:** Use ansible-lint for code quality checks
- **YAML Lint:** Validate YAML syntax with yamllint

```
