---
- name: Create performance Profile
  ansible.builtin.include_tasks: create_directory.yml
  vars:
    dir_path: "{{ must_gather_dir }}"

- name: Collect Must Gather
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  ansible.builtin.shell: |
    oc adm must-gather --dest-dir="{{ must_gather_dir }}"
  register: must_gather
  changed_when: must_gather.rc == 0

- name: Archive Must Gather
  community.general.archive:
    path: "{{ must_gather_dir }}"
    dest: "{{ must_gather_dir }}/pre-mustgather.tar.gz"
    mode: 775
    format: gz

- name: Copy must-gather to artifacts folder
  ansible.builtin.fetch:
    src: "{{ must_gather_dir }}/pre-mustgather.tar.gz"
    dest: "{{ artifacts_folder }}/pre-mustgather.tar.gz"

- name: Get NTO deployment
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    namespace: openshift-cluster-node-tuning-operator
    name: cluster-node-tuning-operator
  register: nto_deployment

- name: Set Image version
  ansible.builtin.set_fact:
    nto_sha: "{{ (nto_deployment.resources[0].spec.template.spec.containers[0].image | split(':'))[1] }}"

- name: Generate performance profile
  ansible.builtin.shell: |
      set -o pipefail
      podman run --rm --tls-verify=false --entrypoint performance-profile-creator -v \
            {{ must_gather_dir }}:{{ must_gather_dir }}:z {{ nto_image }}@sha256:{{ nto_sha }}  \
            --must-gather-dir-path {{ must_gather_dir }} --rt-kernel={{ rt_kernel }} \
            --mcp-name worker-cnf --reserved-cpu-count=4 --topology-manager-policy=single-numa-node \
            --power-consumption-mode ultra-low-latency --user-level-networking | tee /tmp/performanceprofile-spec.yaml
  register: performance_profile_creator
  changed_when: performance_profile_creator.rc != 0

- name: Get CPU pinning settings
  ansible.builtin.set_fact:
    generated_ppc_cpu: "{{ (performance_profile_creator.stdout | from_yaml)['spec']['cpu'] }}"

- name: Render performance Profile
  ansible.builtin.set_fact:
    performance_profile: "{{ lookup('template', 'performanceProfile.yml.j2') }}"

- name: Save Machine config pool
  ansible.builtin.copy:
    dest: "{{ artifacts_folder }}/performanceProfile.yml"
    content: "{{ performance_profile }}"
    mode: '775'
  delegate_to: localhost

- name: Apply performance Profile
  kubernetes.core.k8s:
    state: present
    definition: "{{ performance_profile }}"
    wait: true
    wait_condition:
      type: "Available"
      status: "True"

- name: Wait for MCP to restart
  kubernetes.core.k8s_info:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfigPool
    name: worker-cnf
  register: mcp_restart
  until: >
    mcp_restart.resources is defined and
    mcp_restart.resources | length > 0 and
    mcp_restart.resources[0].status.updatedMachineCount != mcp_restart.resources[0].status.machineCount
  retries: 6
  delay: 10
  vars:
    ansible_failed_result:
      retries: 0
  ignore_errors: true

- name: Wait until the MCP is fully updated
  kubernetes.core.k8s_info:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfigPool
    name: worker-cnf
  register: mcp_status
  until: >
    mcp_status.resources is defined and
    mcp_status.resources | length > 0 and
    mcp_status.resources[0].status.updatedMachineCount == mcp_status.resources[0].status.machineCount and
    mcp_status.resources[0].status.degradedMachineCount == 0
  retries: "{{ mcp_wait_retries }}"
  delay: "{{ mcp_wait_delay }}"
  vars:
    ansible_failed_result:
      retries: 0
